Coding Sytle:
    source files must have .c extension.
    Header files must have .h extension.
    No including .c files.
    Every header file must have #pragma once, no standard header guard.
    Every source must include it's own header.
    Don't use pointer dereference/address of and increment/decrement operators together,
    the order of these operations is undefined in the c standard and it just looks confusing.
    trigraphs, predefined macros, #error, #pragma except once, long long and long double are forbidden.
    stringification, concatenation and variadic macros are highly inadvisable.
    Auto and register keywords are useless.
    Keep global variables, goto, assembly, static variables, extern, ternary operator, 
    unions, function pointers, variadic functions and multi line macros to minimimal use.

General Style:
    CamelCase, standard variables are lowercase.
    Standard indenting.
    No trailng spaces/tabs.
    Files end in a newline.
    One line of space between every section.
    Try to avoid long lines.
    But if a line is long don't make it go over 2 lines.

Comments
    This project uses doxygen and thus comments must be made for it.
    Every file, function, struct, enum, union, macro, struct/union members require a doxygen comment.
    Standard comments can also be used to descibe complicated sections,
    but there doesn't need to be many because of the doxygen comments.
    regular comments are not done as sentences and don't have a leading space.

Doxygen Comments:
    Single Line:
        Single line comments are done as such.
        /// comment
        If they are at the end of code they are done as such ///< comment.

    Multi Line:
        Multi line comments are to be done as such.
        /**
         * @tag1 comment
         * @tag2 comment
         */

    Brief tag:
        Brief tags should only be one line summary.
        Single line comments are considered a brief tag.

    Details tag:
        Multi line all encompassing summary.
        Each line should start at the same column.
        Details tags are done in sentence like fashion.

    Param tag:
        The parameter name follows the param tag,
        then a brief description of the parameter.

    Return tag:
        A brief description of the return value follows the return tag.

    File:
        File comments are done as a multi line comment.
        With required @file, then @brief tag and optional @details tag.
        The file name follows the @file tag.

    Function / Function macro:
        Function comments are done as a multi line comment.
        They start with an @brief tag, then @param for every parameter,
        then @return if it returns a non void, then optional @details.
        If a function only uses an @brief it can instead be 
        done as a single line coment above the function.

    Data structure:
        Data structures are done as a single line comment above the data 
        structure or a multi line comment if they require an @details tag.

    Member / Object Macro:
        These are given a single line comment at after the member/macro

Brackets:
    Brackets are not optional on one line structures.
    The following bracket style is to be used for all structures.
    void func(void) {
        return;
    }

Header Files:
    Starts with a doxygen comment.
    Then #pragma once.
    Then all #includes.
    Then macros.
    Then structs, enums, unions, function declarations in that order.

Source Files:
    Starts with a doxygen comment.
    Then #includes.
    Then global variables.
    Then function definitions.

Data types:
    Don't use c default names for integers, floats and bools, 
    use types.h macros instead.

Attributes:
    Don't use __attribute__(()) as it is very bulky,
    define macros in attributes.h and use those instead.

Functions:
    Naming is lower_case_with_under_scores.
    Try to keep under 50 lines, don't randomly split functions up to enforce this.
    Errors are handled by returning bools, true = error.
    Inline is only to be used for small functions.

Macros:
    Macro behavior can get hard to predict so it is best to keep the small and simple.
    Simple object macros that hold a value are advised, ALL CAPS.
    Simple one line functions can also be good to use, same naming as regular functions.
    Multi line macros should only be used on areas that need heavy optimisation,
    even then it's arguable if it's really better than an always inlined function.
    Stringification, concatenation and variadic macros might have a niche,
    but they are just dangerous to use and unessesary.

#include:
    Use "" syntax not <>

Loops:
    For "infinite" loops use while (true) not for (;;).
    For loops can have a lot of wierd variations, probably don't put 
    multiple initialisation and iteration conditions though.

    while (statement);

    while (statement) {
        //code
    }

    do {
        //code
    } while (statement);

    for (u8 i = 0; i < len; ++i) {
        //code
    }

If:
    if (statement) {
        //code
    } else if (statement) {
        //code
    } else {
        //code
    }

Switch:
    Switch case fallthrough is fine to use but comment it.
    Default statement is optional.

    switch (condition) {
        case const1:
            //code
            break;
        case const2:
            //code
            break;
        default:
            //code
    }

Struct:
    Use typedef.
    Captitalised name.

    typedef struct {
        bool member1;
        u64 member2;
    } Name;

Enum:
    Use typedef.
    Captitalised name.
    ALL CAPS members.

    typedef enum {
        WHITE,
        BLACK
    } Name;

Union:
    Same as struct.

Inline Assembly:
    Use intel syntax.
    Keep asm short.
